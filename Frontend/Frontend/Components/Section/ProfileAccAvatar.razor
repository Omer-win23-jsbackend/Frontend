@attribute [StreamRendering]
@using System.Net.Http.Headers
@if(user == null)
{
	<p>Loading...</p>
}
else
{

<section class="account-profile">
	<div class="profile-info">
		<img src="/images/uploads/profiles/@user.ProfileImage" alt="@user.Firstname @user.Lastname" />

		<EditForm Model="@uploadModel" OnInvalidSubmit="HandleProfileUpload">
			<InputFile id="fileUploader" OnChange="HandleFileSelected" hidden />
			<label for="fileUploader" class="btn btn-circle btn-circle-sm">
				<i class="fa-regular fa-refresh"></i>
			</label>
		</EditForm>
		<h5>@user.Firstname @user.Lastname</h5>
		<p>@user.Email</p>
	</div>
</section>
	
}


@code {
	[Parameter]
	public ApplicationUser user { get; set; } = default!;
	private MultipartFormDataContent uploadModel = new MultipartFormDataContent();
	private IBrowserFile? selectedFile;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;


	private void HandleFileSelected(InputFileChangeEventArgs e)
	{
		selectedFile = e.File;
	}

	private async Task LoadUserDataAsync()
	{
		user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
	}

	public async Task HandleProfileUpload()
	{
		if(selectedFile != null)
		{
			using var content = new MultipartFormDataContent();
			var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15));
			fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
			content.Add(fileContent, "file", selectedFile.Name);

			var result = await Http.PostAsync(Environment.GetEnvironmentVariable("FileProvider_Upload"), content);
			if (result.IsSuccessStatusCode)
			{
				await LoadUserDataAsync();
				StateHasChanged();
			}

		}
	}

}
